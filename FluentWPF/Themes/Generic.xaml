<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:SourceChord.FluentWPF">
    <local:AddValueConverter x:Key="addValueConverter" />
    <Style x:Key="AcrylicWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <!--<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="{x:Static local:AccentColors.SystemAccentColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border x:Name="windowBorder"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Grid >
                            <!-- Color tint overlay -->
                            <Rectangle x:Name="tintColorLayer"
                                       Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:AcrylicWindow.TintOpacity)}">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource AncestorType=Rectangle}, Path=(local:AcrylicWindow.TintColor)}" />
                                </Rectangle.Fill>
                            </Rectangle>
                            <!-- Tiled noise texture -->
                            <Rectangle x:Name="noiseLayer"
                                       Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:AcrylicWindow.NoiseOpacity)}">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/FluentWPF;component/Assets/Images/noise.png"
                                                TileMode="Tile" Stretch="None"
                                                ViewportUnits="Absolute" Viewport="0,0,128,128"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            
                            <!-- Fallback color layer -->
                            <Rectangle x:Name="fallbackLayer" Visibility="Collapsed">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:AcrylicWindow.FallbackColor)}" />
                                </Rectangle.Fill>
                            </Rectangle>

                            <DockPanel LastChildFill="True">
                                <Grid x:Name="captionGrid"
                                      DockPanel.Dock="Top" Height="30">
                                    <TextBlock Text="{TemplateBinding Title}"
                                           Margin="8,0"
                                           VerticalAlignment="Center"/>
                                </Grid>
                                <AdornerDecorator>
                                    <ContentPresenter/>
                                </AdornerDecorator>
                            </DockPanel>
                        </Grid>


                    </Border>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="tintColorLayer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="noiseLayer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="fallbackLayer" Property="Visibility" Value="Visible" />
                            <Setter TargetName="captionGrid" Property="TextBlock.Foreground" Value="Gray" />
                            <Setter TargetName="windowBorder" Property="Border.BorderBrush" Value="Gray" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="{x:Static SystemParameters.CaptionHeight}"
                      GlassFrameThickness="-1"
                      ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                <Setter Property="Template" Value="{StaticResource WindowTemplateKey}"/>
            </Trigger>
            <Trigger Property="IsActive" Value="False">

            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:AcrylicWindow}" BasedOn="{StaticResource AcrylicWindowStyle}">
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AcrylicWindow}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style TargetType="{x:Type local:ParallaxView}">
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ParallaxView}">
                    <ContentPresenter Margin="{TemplateBinding OffsetMargin}">
                        <ContentPresenter.Height>
                            <MultiBinding Converter="{StaticResource addValueConverter}">
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type local:ParallaxView}}" Path="ActualHeight"/>
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type local:ParallaxView}}" Path="VerticalShift"/>
                            </MultiBinding>
                        </ContentPresenter.Height>
                        <ContentPresenter.Width>
                            <MultiBinding Converter="{StaticResource addValueConverter}">
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type local:ParallaxView}}" Path="ActualWidth"/>
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type local:ParallaxView}}" Path="HorizontalShift"/>
                            </MultiBinding>
                        </ContentPresenter.Width>
                    </ContentPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
